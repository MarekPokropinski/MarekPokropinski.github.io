{"version":3,"sources":["../node_modules/@vladmandic/face-api/dist sync","App.js","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","cv","window","App","props","state","isModelLoaded","filename","fileData","videoCapture","videoOutputCanvasContext","srcMat","dstMat","resizedSrcMat","rotatedMat","processVideo","bind","runModel","videoSize","model","cameraVideo","refImageTensor","a","tf","this","faceapi","ssdMobilenetv1","loadFromUri","tinyFaceDetector","faceLandmark68Net","console","log","setState","loadModels","frame","targetEyeDistcance","withFaceLandmarks","detectionWithLandmarks","landmarks","mouthLandmarks","getMouth","leftEyePos","getLeftEye","reduce","prev","curr","x","y","rightEyePos","getRightEye","mouthPos","length","eyeOffset","angle","Math","atan2","PI","eyeCenter","mouthOffset","scaleX","sqrt","scaleY","document","getElementById","video","createElement","error","setAttribute","constraints","audio","facingMode","navigator","mediaDevices","getUserMedia","stream","srcObject","VideoCapture","setTimeout","begin","Date","now","FPS","width","height","canvasVideoOutput","getContext","Mat","CV_8UC4","srcMatC3","CV_8UC3","read","cvtColor","COLOR_RGBA2RGB","detectFace","detectionResults","delay","rotationMatrix","getRotationMatrix2D","Point","warpAffine","Size","resize","eyeCenterScaled","offset","cropped","roi","Rect","floor","croppedClone","clone","data","delete","row","col","channel","idx1","cols","channels","idx2","dst","min","alpha","reverseRotationMatrix","imshow","srcImage","inputTensor","scaledInputTensor","outputTensor","predict","reshaped","mul","files","fr","FileReader","canvas","ctx","onload","img","drawImage","removedAlphaChannel","getImageData","filter","element","i","refTensor","resizeBilinear","toPixels","src","result","readAsDataURL","onClick","setupCameraVideo","style","border","hidden","type","value","onChange","handleFileLoad","target","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cc9a8446.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 262;","import React from 'react';\nimport './App.css';\nimport * as tf from '@tensorflow/tfjs';\nimport '@tensorflow/tfjs-backend-webgl';\n// import * as faceapi from 'face-api.js';\nimport * as faceapi from '@vladmandic/face-api';\n\nvar cv = window.cv;\n\nvar loadScript = function (src) {\n  var tag = document.createElement('script');\n  tag.async = false;\n  tag.src = src;\n  document.getElementsByTagName('body')[0].appendChild(tag);\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModelLoaded: false,\n      filename: \"\",\n      fileData: \"\"\n    }\n\n    this.videoCapture = null;\n    this.videoOutputCanvasContext = null;\n    // this.srcMat = new cv.Mat(width, height, cv.CV_8UC4);\n    // this.dstMat = new cv.Mat(width, height, cv.CV_8UC1);\n    this.srcMat = null;\n    this.dstMat = null;\n    this.resizedSrcMat = null;\n    this.rotatedMat = null;\n    this.processVideo = this.processVideo.bind(this);\n    // this.processVideo = async () => { try { await this.processVideo() } catch (error) { console.log(error) } }\n    this.runModel = this.runModel.bind(this);\n    this.videoSize = null;\n    this.model = null;\n    this.cameraVideo = null;\n    this.refImageTensor = null;\n  }\n\n  // euclidean_distance(a, b) {\n  //   return Math.sqrt()\n  // }\n  async loadModels() {\n    this.model = await tf.loadGraphModel('/tfjs_model/model.json')\n    await faceapi.nets.ssdMobilenetv1.loadFromUri('/models');\n    await faceapi.nets.tinyFaceDetector.loadFromUri('/models');\n    await faceapi.nets.faceLandmark68Net.loadFromUri('/models');\n    this.model = await tf.loadGraphModel('/tfjs_model/model.json')\n    console.log('loaded tf models');\n    this.setState({ isModelLoaded: true });\n  }\n\n  componentDidMount() {\n    // loadScript('/opencv.js');\n    //eslint-disable-next-line\n    // this.dstMat = new cv.Mat();\n    // this.resizedSrcMat = new cv.Mat();\n    // this.rotatedMat = new cv.Mat();\n    this.loadModels();\n  }\n\n  async detectFace(frame) {\n    const targetEyeDistcance = 82;\n    const targetLeftEyePos = new faceapi.Point(110, 102);\n    const targetMouthPos = 235;\n\n    const detectionWithLandmarks = await faceapi.detectSingleFace(frame).withFaceLandmarks()\n    if (!detectionWithLandmarks) throw Error();\n    const landmarks = detectionWithLandmarks.landmarks;\n    // console.log(landmarks.getLeftEye())\n    const mouthLandmarks = landmarks.getMouth();\n    let leftEyePos = landmarks.getLeftEye().reduce((prev, curr) => new faceapi.Point(prev.x + curr.x, prev.y + curr.y));\n    let rightEyePos = landmarks.getRightEye().reduce((prev, curr) => new faceapi.Point(prev.x + curr.x, prev.y + curr.y));\n    let mouthPos = mouthLandmarks.reduce((prev, curr) => new faceapi.Point(prev.x + curr.x, prev.y + curr.y));\n    leftEyePos = new faceapi.Point(leftEyePos.x / 6, leftEyePos.y / 6);\n    rightEyePos = new faceapi.Point(rightEyePos.x / 6, rightEyePos.y / 6);\n    mouthPos = new faceapi.Point(mouthPos.x / mouthLandmarks.length, mouthPos.y / mouthLandmarks.length);\n\n    const eyeOffset = new faceapi.Point(rightEyePos.x - leftEyePos.x, rightEyePos.y - leftEyePos.y);\n\n    const angle = Math.atan2(eyeOffset.y, eyeOffset.x) * 180 / Math.PI;\n    const eyeCenter = new faceapi.Point((rightEyePos.x + leftEyePos.x) / 2, (rightEyePos.y + leftEyePos.y) / 2);\n    const mouthOffset = new faceapi.Point(mouthPos.x - eyeCenter.x, mouthPos.y - eyeCenter.y);\n    const scaleX = targetEyeDistcance / Math.sqrt(eyeOffset.x ** 2 + eyeOffset.y ** 2);\n    const scaleY = 86 / Math.sqrt(mouthOffset.x ** 2 + mouthOffset.y ** 2);\n\n    // console.log(angle*180/Math.PI);\n    return { angle, eyeCenter, scaleX, scaleY };\n  }\n\n  async setupCameraVideo() {\n    const cameraVideoWrapper = document.getElementById(\"cameraVideoWrapper\");\n    const video = document.createElement('video');\n    if (video === null) {\n      console.error(\"Couldn't create video element\");\n      return;\n    }\n    this.videoSize = [1920, 1080];\n    video.setAttribute('playsinline', '');\n    video.setAttribute('autoplay', '');\n    video.setAttribute('muted', '');\n    video.setAttribute('width', `${this.videoSize[0]}px`);\n    video.setAttribute('height', `${this.videoSize[1]}px`);\n\n    // video.style.width = '200px';\n    // video.style.height = '200px';\n    // cameraVideoWrapper.appendChild(video);\n\n    var facingMode = \"user\";\n    var constraints = {\n      audio: false,\n      video: {\n        facingMode: facingMode\n      }\n    };\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    video.srcObject = stream;\n    this.videoCapture = new cv.VideoCapture(video)\n    this.cameraVideo = video;\n    setTimeout(() => this.processVideo(), 1000);\n  }\n\n  async processVideo() {\n    let begin = Date.now();\n    const FPS = 15;\n    // try {\n    const [width, height] = this.videoSize;\n    if (this.videoOutputCanvasContext === null) {\n      let canvasVideoOutput = document.getElementById(\"videoOutput\");\n      this.videoOutputCanvasContext = canvasVideoOutput.getContext(\"2d\");\n      this.srcMat = new cv.Mat(height, width, cv.CV_8UC4);\n      this.srcMatC3 = new cv.Mat(height, width, cv.CV_8UC3);\n      this.dstMat = new cv.Mat();\n      this.resizedSrcMat = new cv.Mat();\n      this.rotatedMat = new cv.Mat();\n    }\n\n    this.videoCapture.read(this.srcMat);\n    cv.cvtColor(this.srcMat, this.srcMatC3, cv.COLOR_RGBA2RGB);\n    let detectionResults;\n\n    try {\n      detectionResults = await this.detectFace(this.cameraVideo);\n    }\n    catch (error) {\n      // console.log(error);\n      let delay = 1000 / FPS - (Date.now() - begin);\n      setTimeout(this.processVideo, delay);\n      return;\n    }\n    const { angle, eyeCenter, scaleX, scaleY } = detectionResults;\n    const rotationMatrix = cv.getRotationMatrix2D(new cv.Point(eyeCenter.x, eyeCenter.y), angle, 1.0);\n    cv.warpAffine(this.srcMatC3, this.rotatedMat, rotationMatrix, new cv.Size(1920, 1080));\n    cv.resize(this.rotatedMat, this.resizedSrcMat, new cv.Size(0, 0), scaleX, scaleY);\n\n    const eyeCenterScaled = new faceapi.Point(eyeCenter.x * scaleX, eyeCenter.y * scaleY);\n    const offset = new faceapi.Point(eyeCenterScaled.x - 165 / 1.41, eyeCenterScaled.y - 102 / 1.41);\n    let cropped = null;\n    try {\n      cropped = this.resizedSrcMat.roi(new cv.Rect(Math.floor(offset.x), Math.floor(offset.y), 256, 256));\n\n      const croppedClone = cropped.clone();\n      const data = await this.runModel(croppedClone.data);\n      croppedClone.delete();\n\n      for (let row = 0; row < 256; row++) {\n        for (let col = 0; col < 256; col++) {\n          for (let channel = 0; channel < 3; channel++) {\n            const idx1 = (row + Math.floor(offset.y)) * this.resizedSrcMat.cols * this.resizedSrcMat.channels() + (col + Math.floor(offset.x)) * this.resizedSrcMat.channels() + channel;\n            const idx2 = row * 256 * 3 + col * 3 + channel;\n            const dst = Math.min(255 - col, row, 255 - row, row);\n            if (dst > 10) {\n              this.resizedSrcMat.data[idx1] = data[idx2];\n            } else {\n              const alpha = (dst) / 10;\n              this.resizedSrcMat.data[idx1] = alpha * data[idx2] + (1 - alpha) * this.resizedSrcMat.data[idx1];\n            }\n          }\n        }\n      }\n      cv.resize(this.resizedSrcMat, this.resizedSrcMat, new cv.Size(0, 0), 1 / scaleX, 1 / scaleY);\n      const reverseRotationMatrix = cv.getRotationMatrix2D(new cv.Point(eyeCenter.x, eyeCenter.y), -angle, 1.0);\n      cv.warpAffine(this.resizedSrcMat, this.resizedSrcMat, reverseRotationMatrix, new cv.Size(1920, 1080));\n\n      cv.imshow(\"videoOutput\", this.resizedSrcMat);\n      // mat.delete();\n    } catch (error) {\n      console.error(error)\n    }\n    if (cropped !== null) cropped.delete();\n\n    // cv.imshow(\"videoOutput\", cropped);\n\n    let delay = 1000 / FPS - (Date.now() - begin);\n    setTimeout(this.processVideo, delay);\n  }\n\n  runModel(srcImage) {\n    // const inputTensor_ = tf.tensor(srcImage, [1, 3, 256, 256], 'float32');\n    // const inputTensor = inputTensor_.transpose([0, 2, 3, 1]);\n    const inputTensor = tf.tensor(srcImage, [1, 256, 256, 3], 'float32');\n    const scaledInputTensor = tf.div(tf.cast(inputTensor, 'float32'), 255.0);\n    const outputTensor = this.model.predict([scaledInputTensor, this.refImageTensor]);\n    const reshaped = tf.reshape(outputTensor[0], [256, 256, 3]);\n    const mul = tf.mul(reshaped, 255.0);\n    const out = tf.cast(mul, 'int32');\n    // tf.browser.toPixels(reshaped, document.getElementById(\"videoOutput\"));\n    // tf.browser.toPixels(scaledInputTensor.reshape([256, 256, 3]), document.getElementById(\"videoOutput\"));\n    return out.data()\n  }\n\n  handleFileLoad(files) {\n    const fr = new FileReader();\n    const canvas = document.createElement(\"canvas\");\n    canvas.setAttribute('width', '1000');\n    canvas.setAttribute('height', '1000');\n    const ctx = canvas.getContext(\"2d\");\n    fr.onload = () => {\n      const img = document.getElementById(\"refImage\");\n      img.onload = () => {\n        ctx.drawImage(img, 0, 0);\n        const imageData = ctx.getImageData(0, 0, img.width, img.height).data;\n        const removedAlphaChannel = imageData.filter((element, i) => i % 4 != 3);\n        if (this.refImageTensor !== null) {\n          tf.dispose(this.refImageTensor);\n        }\n        const refTensor = tf.tensor(removedAlphaChannel, [1, img.width, img.height, 3]);\n        this.refImageTensor = tf.image.resizeBilinear(tf.div(refTensor, 255.0), [256, 256]);\n        tf.browser.toPixels(tf.reshape(this.refImageTensor, [256, 256, 3]), document.getElementById(\"targetMakeupCanvas\"));\n        tf.dispose(refTensor);\n      }\n      img.src = fr.result;\n    };\n    fr.readAsDataURL(files[0]);\n  }\n\n  render() {\n    if (!this.state.isModelLoaded) {\n      return (\n        <div>\n          Downloading model. Please wait.\n        </div>\n      )\n    }\n    return (\n      <div>\n        <div id=\"cameraVideoWrapper\"></div>\n        <button onClick={() => this.setupCameraVideo()}>start video</button>\n        <canvas id=\"videoOutput\" />\n        <img id=\"refImage\" style={{ border: \"1px\" }} hidden />\n        <canvas id=\"targetMakeupCanvas\" width={256} height={256} />\n        <input type=\"file\" id=\"myFile\" value=\"\" onChange={e => this.handleFileLoad(e.target.files)} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}